/*
 * โปรเจกต์: Serial Echo สำหรับ ESP32
 * หน้าที่: รับข้อความจากผู้ใช้ผ่าน Serial Monitor และส่งข้อความเดิมกลับไป
 * ผู้จัดทำ: ผู้เชี่ยวชาญด้าน ESP32
 * สำหรับ: ผู้เริ่มต้น
 */

// ฟังก์ชัน setup() จะทำงานเพียงครั้งเดียวเมื่อ ESP32 เริ่มทำงานหรือถูกรีเซ็ต
void setup() {
  // เริ่มต้นการสื่อสารแบบอนุกรม (Serial Communication)
  // 115200 คือ parameter ที่ระบุ Baud Rate หรือความเร็วในการรับส่งข้อมูล (หน่วยเป็น บิตต่อวินาที)
  // เราต้องตั้งค่าความเร็วนี้ใน Serial Monitor ให้ตรงกันด้วย
  Serial.begin(115200);

  // หน่วงเวลาเล็กน้อยเพื่อให้ Serial Monitor พร้อมทำงาน
  // 1000 คือ parameter ที่ระบุระยะเวลาที่ให้รอ (หน่วยเป็นมิลลิวินาที) หรือเท่ากับ 1 วินาที
  delay(1000); 

  // พิมพ์ข้อความต้อนรับออกไปที่ Serial Monitor เพื่อบอกให้ผู้ใช้รู้ว่าบอร์ดพร้อมแล้ว
  Serial.println("ESP32 พร้อมรับข้อความ! พิมพ์ข้อความแล้วกด Enter ได้เลยครับ");
}

// ฟังก์ชัน loop() จะทำงานวนซ้ำไปเรื่อยๆ ไม่สิ้นสุด หลังจากที่ฟังก์ชัน setup() ทำงานเสร็จแล้ว
void loop() {
  // ตรวจสอบว่ามีข้อมูลส่งเข้ามาทาง Serial หรือไม่
  // Serial.available() จะคืนค่าเป็นจำนวนไบต์ (ตัวอักษร) ที่รออยู่ในบัฟเฟอร์
  if (Serial.available() > 0) { // > 0 คือ parameter ที่ใช้เป็นเงื่อนไขในการตรวจสอบว่ามีข้อมูลเข้ามาอย่างน้อย 1 ไบต์
    
    // อ่านข้อความทั้งหมดที่ส่งเข้ามาจนกว่าจะเจอ "ตัวขึ้นบรรทัดใหม่" ('\n')
    // '\n' คือ parameter ที่บอกให้หยุดอ่านเมื่อเจออักขระนี้ ซึ่งเป็นสิ่งที่ Serial Monitor ส่งมาเมื่อเรากดปุ่ม Enter
    String incomingMessage = Serial.readStringUntil('\n');

    // บางครั้งข้อความที่รับมาอาจมีช่องว่างหรืออักขระพิเศษที่ไม่ต้องการติดมาด้วย
    // .trim() เป็นฟังก์ชันที่ช่วยลบช่องว่างเหล่านั้นออกจากด้านหน้าและด้านหลังของข้อความ
    incomingMessage.trim();

    // พิมพ์ข้อความนำหน้า เพื่อให้รู้ว่าเป็นข้อความที่บอร์ดส่งกลับไป
    Serial.print("คุณส่งข้อความมาว่า: ");

    // พิมพ์ข้อความที่เพิ่งได้รับกลับออกไปที่ Serial Monitor
    // incomingMessage คือ parameter ที่เป็นตัวแปรชนิด String ซึ่งเก็บข้อความที่ผู้ใช้ส่งมา
    Serial.println(incomingMessage); 
  }
}
